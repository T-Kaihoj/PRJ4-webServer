@using MVC.ViewModels;

@{
    ViewData["Title"] = "Withdraw Money";
}

@model  WithdrawViewModel

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h1 class="panel-title">
                        Withdraw Money
                    </h1>
                </div>
                <div class="panel-body">
                    <p style="text-align: left; font-size: 20px">
                        <b>Your balance:</b>
                        <span style="font-size: 18px; color:black; font-weight: bold;">@Model.CurrentBalance</span>
                    </p>
                    @using (Html.BeginForm("Withdraw", "User", FormMethod.Post, new { @id = "WithdrawMoneyForm" }))
                    {
                        <div class="form-group label-floating">
                            @Html.LabelFor(m => m.Withdraw, new {@class = "control-label"})
                            @Html.TextBoxFor(m => m.Withdraw, new {@class = "form-control"})
                            @Html.ValidationMessageFor(m => m.Withdraw)
                        </div>
                        <div>
                            <button type="submit" value="post" name="action:post" class="btn btn-raised btn-primary pull-right">
                                Withdraw
                            </button>
                            <button type="reset" class="btn btn-raised pull-left">
                                Reset
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        $(function () {
            $("#WithdrawMoneyForm").validate({
                rules: {
                    Withdraw: {
                        required: true,
                        number: true,
                        min: 0,
                        max: @Model.CurrentBalance.ToString("F2").Replace(',', '.')
                    }
                },

                messages: {
                    Withdraw: {
                        required: "@Resources.User.ErrorWithdrawRequired",
                        number: "@Resources.User.ErrorWithdrawMustBeNumber",
                        min: "@Resources.User.ErrorNegativeWithdraw",
                        max: "@Resources.User.ErrorNotEnoughFunds"
                    }
                },

                submitHandler: function (form) {
                    form.submit();
                }
            });

            findErrorTags();
        });
    </script>
}
